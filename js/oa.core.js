
THREE.TextGeometry = function ( text, parameters ) {
    parameters = parameters || {};
    this.textShapes = THREE.FontUtils.generateShapes( text, parameters );
    parameters.amount = parameters.height !== undefined ? parameters.height : 50;

    // defaults
    if ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;
    if ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;
    if ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;
    THREE.ExtrudeGeometry.call( this, this.textShapes, parameters );
    this.type = 'TextGeometry';
};
THREE.TextGeometry.prototype = Object.create( THREE.ExtrudeGeometry.prototype );

var OA = {
    REVISION: 'r01',
    debugMode: false,
    logLevel: 2, //0: error, 1: warning, 2: info
    tunePath: true,
    light: true,
    pointLight: false,
    paperTexture: true,
    clipScale: 1000,
    cameraXOffset: 55,
    cameraYOffset: 15,
    recentLimit: 20,
    isSaveLocalStorage: true,
    paperTextureInfo:{
//     src: "textures/wood.jpg",
//     size: 575,
//     isFill: false

        // src: "textures/leather01.jpg",
        // size: 600,
        // isFill: false

//     src: "textures/bumpmap3.bmp",
//     size: 256,
//     isFill: false

//     src: "textures/bump1.jpg",
//     size: 512,
//     isFill: false

        // src: "textures/bump2.jpg",
        // size: 512,
        // isFill: false

        // src: "textures/bump4.jpg",
        // size: 400,
        // isFill: false

//     src: "textures/bump5.jpg",
//     size: 500,
//     isFill: false

        src: "textures/bump6.jpg",
        size: 300,
        isFill: false

        // src: "textures/p3.jpg",
        // size: 130,
        // isFill: false

        // src: "textures/paper0.jpg",
        // size: 200,
        // isFill: false

        // src: "textures/picture1.jpg",
        // size: 500,
        // isFill: true,
        // offset:{
        //  x:0,
        //  y:0.5
        // }
    }
};

OA.Utils = {
    log: function(str, logLevel) {
        if (!logLevel) {
            logLevel = 2;
        }
        if (logLevel <= OA.logLevel) {
            console.error(str);
        }
    },

    get_text_polys : function() {
        var text_polygon = '[[{"X":"28.18","Y":"205.95"},{"X":"28.18","Y":"105.07"},{"X":"48.27","Y":"105.07"},{"X":"48.28","Y":"110.23"},{"X":"54.15","Y":"107.22"},{"X":"59.69","Y":"105.39"},{"X":"65.04","Y":"104.66"},{"X":"72.07","Y":"105.08"},{"X":"78.09","Y":"106.31"},{"X":"81.57","Y":"107.68"},{"X":"84.84","Y":"110.05"},{"X":"88.03","Y":"113.63"},{"X":"90.87","Y":"118.22"},{"X":"92.71","Y":"123.12"},{"X":"94.06","Y":"129.73"},{"X":"94.70","Y":"138.25"},{"X":"94.41","Y":"147.24"},{"X":"93.31","Y":"155.42"},{"X":"91.66","Y":"161.49"},{"X":"89.46","Y":"166.25"},{"X":"86.67","Y":"170.32"},{"X":"83.75","Y":"173.13"},{"X":"80.65","Y":"174.92"},{"X":"75.51","Y":"176.56"},{"X":"69.28","Y":"177.50"},{"X":"63.74","Y":"177.55"},{"X":"57.05","Y":"176.72"},{"X":"51.42","Y":"175.15"},{"X":"48.27","Y":"173.79"},{"X":"48.27","Y":"205.95"},{"X":"48.27","Y":"205.95"},{"X":"28.18","Y":"205.95"}],[{"X":"48.28","Y":"120.42"},{"X":"48.38","Y":"164.32"},{"X":"52.31","Y":"166.53"},{"X":"56.14","Y":"167.74"},{"X":"61.35","Y":"168.35"},{"X":"65.96","Y":"167.83"},{"X":"69.49","Y":"166.59"},{"X":"72.20","Y":"164.73"},{"X":"74.29","Y":"162.19"},{"X":"76.19","Y":"157.95"},{"X":"77.71","Y":"152.00"},{"X":"78.63","Y":"144.11"},{"X":"78.66","Y":"136.61"},{"X":"77.89","Y":"129.16"},{"X":"76.59","Y":"124.08"},{"X":"74.84","Y":"120.60"},{"X":"72.55","Y":"118.04"},{"X":"69.77","Y":"116.28"},{"X":"65.91","Y":"115.07"},{"X":"60.69","Y":"114.57"},{"X":"56.85","Y":"115.18"},{"X":"53.10","Y":"116.68"},{"X":"48.91","Y":"119.57"},{"X":"48.28","Y":"120.39"},{"X":"48.28","Y":"120.42"}],[{"X":"132.15","Y":"104.65"},{"X":"139.94","Y":"105.10"},{"X":"146.11","Y":"106.30"},{"X":"151.03","Y":"108.11"},{"X":"155.15","Y":"110.57"},{"X":"158.60","Y":"113.67"},{"X":"161.35","Y":"117.41"},{"X":"163.45","Y":"121.89"},{"X":"165.10","Y":"127.80"},{"X":"166.07","Y":"135.09"},{"X":"166.22","Y":"143.93"},{"X":"165.51","Y":"151.69"},{"X":"164.06","Y":"158.12"},{"X":"162.01","Y":"163.28"},{"X":"159.40","Y":"167.47"},{"X":"156.32","Y":"170.74"},{"X":"152.52","Y":"173.40"},{"X":"147.87","Y":"175.49"},{"X":"142.07","Y":"176.99"},{"X":"134.92","Y":"177.77"},{"X":"127.42","Y":"177.67"},{"X":"120.74","Y":"176.71"},{"X":"115.29","Y":"175.07"},{"X":"110.74","Y":"172.78"},{"X":"106.95","Y":"169.86"},{"X":"103.92","Y":"166.34"},{"X":"101.48","Y":"162.04"},{"X":"99.57","Y":"156.68"},{"X":"98.29","Y":"150.05"},{"X":"97.78","Y":"141.98"},{"X":"98.18","Y":"134.19"},{"X":"99.36","Y":"127.55"},{"X":"101.22","Y":"122.01"},{"X":"103.68","Y":"117.38"},{"X":"106.77","Y":"113.52"},{"X":"110.41","Y":"110.41"},{"X":"114.84","Y":"107.89"},{"X":"120.07","Y":"106.06"},{"X":"126.27","Y":"104.95"},{"X":"132.11","Y":"104.65"},{"X":"132.15","Y":"104.65"}],[{"X":"117.86","Y":"140.93"},{"X":"118.75","Y":"153.65"},{"X":"119.63","Y":"158.05"},{"X":"121.31","Y":"161.73"},{"X":"123.57","Y":"164.71"},{"X":"126.01","Y":"166.43"},{"X":"129.14","Y":"167.44"},{"X":"133.32","Y":"167.70"},{"X":"137.17","Y":"167.11"},{"X":"140.03","Y":"165.83"},{"X":"142.14","Y":"163.92"},{"X":"143.62","Y":"161.33"},{"X":"145.05","Y":"155.97"},{"X":"145.97","Y":"148.23"},{"X":"146.12","Y":"137.89"},{"X":"145.44","Y":"129.22"},{"X":"144.13","Y":"122.91"},{"X":"142.80","Y":"119.58"},{"X":"140.91","Y":"117.26"},{"X":"138.39","Y":"115.66"},{"X":"135.07","Y":"114.75"},{"X":"131.03","Y":"114.64"},{"X":"127.21","Y":"115.38"},{"X":"124.25","Y":"116.82"},{"X":"122.07","Y":"118.86"},{"X":"120.53","Y":"121.59"},{"X":"119.03","Y":"126.93"},{"X":"118.09","Y":"134.21"},{"X":"117.86","Y":"140.81"},{"X":"117.86","Y":"140.93"}],[{"X":"172.03","Y":"177.00"},{"X":"172.03","Y":"76.33"},{"X":"191.91","Y":"76.33"},{"X":"191.91","Y":"177.00"},{"X":"191.91","Y":"177.00"},{"X":"172.03","Y":"177.00"}],[{"X":"224.60","Y":"196.88"},{"X":"221.39","Y":"198.11"},{"X":"215.61","Y":"199.00"},{"X":"208.60","Y":"199.21"},{"X":"204.09","Y":"190.40"},{"X":"211.28","Y":"190.55"},{"X":"214.82","Y":"189.98"},{"X":"217.84","Y":"188.66"},{"X":"220.35","Y":"186.54"},{"X":"222.45","Y":"183.44"},{"X":"224.33","Y":"178.55"},{"X":"225.80","Y":"173.86"},{"X":"195.43","Y":"105.07"},{"X":"215.95","Y":"105.07"},{"X":"235.40","Y":"149.04"},{"X":"252.44","Y":"105.07"},{"X":"265.17","Y":"105.14"},{"X":"233.73","Y":"186.25"},{"X":"231.07","Y":"190.77"},{"X":"228.03","Y":"194.27"},{"X":"224.70","Y":"196.82"},{"X":"224.60","Y":"196.88"}],[{"X":"292.60","Y":"192.98"},{"X":"298.73","Y":"192.56"},{"X":"303.08","Y":"191.46"},{"X":"305.98","Y":"189.91"},{"X":"307.86","Y":"187.98"},{"X":"308.96","Y":"185.54"},{"X":"309.26","Y":"183.06"},{"X":"309.20","Y":"173.81"},{"X":"304.04","Y":"175.83"},{"X":"298.03","Y":"177.13"},{"X":"291.00","Y":"177.63"},{"X":"284.29","Y":"177.05"},{"X":"278.60","Y":"175.70"},{"X":"274.88","Y":"174.11"},{"X":"271.82","Y":"171.71"},{"X":"268.90","Y":"168.11"},{"X":"266.25","Y":"163.24"},{"X":"264.52","Y":"157.97"},{"X":"263.31","Y":"150.88"},{"X":"262.81","Y":"141.60"},{"X":"263.34","Y":"132.62"},{"X":"264.61","Y":"125.23"},{"X":"266.40","Y":"119.67"},{"X":"268.74","Y":"115.31"},{"X":"271.95","Y":"111.17"},{"X":"275.11","Y":"108.42"},{"X":"278.30","Y":"106.76"},{"X":"283.81","Y":"105.35"},{"X":"290.52","Y":"104.67"},{"X":"295.16","Y":"104.90"},{"X":"299.98","Y":"105.99"},{"X":"306.08","Y":"108.50"},{"X":"309.26","Y":"110.23"},{"X":"309.26","Y":"105.06"},{"X":"329.35","Y":"105.06"},{"X":"329.23","Y":"182.37"},{"X":"328.37","Y":"186.78"},{"X":"326.76","Y":"190.49"},{"X":"324.35","Y":"193.73"},{"X":"321.15","Y":"196.44"},{"X":"316.95","Y":"198.74"},{"X":"311.55","Y":"200.55"},{"X":"304.61","Y":"201.78"},{"X":"296.23","Y":"202.25"},{"X":"286.50","Y":"201.75"},{"X":"279.10","Y":"200.55"},{"X":"271.33","Y":"198.26"},{"X":"269.50","Y":"197.28"},{"X":"268.04","Y":"186.11"},{"X":"273.14","Y":"188.62"},{"X":"280.19","Y":"191.16"},{"X":"286.81","Y":"192.48"},{"X":"292.48","Y":"192.97"},{"X":"292.60","Y":"192.98"}],[{"X":"309.26","Y":"120.42"},{"X":"308.13","Y":"119.26"},{"X":"303.52","Y":"116.46"},{"X":"299.14","Y":"114.93"},{"X":"296.63","Y":"114.57"},{"X":"291.87","Y":"115.12"},{"X":"288.19","Y":"116.39"},{"X":"285.33","Y":"118.31"},{"X":"282.99","Y":"121.03"},{"X":"281.19","Y":"124.65"},{"X":"279.81","Y":"130.01"},{"X":"278.92","Y":"137.91"},{"X":"278.88","Y":"145.11"},{"X":"279.69","Y":"152.40"},{"X":"281.18","Y":"158.05"},{"X":"283.08","Y":"162.12"},{"X":"285.18","Y":"164.65"},{"X":"287.89","Y":"166.53"},{"X":"291.41","Y":"167.79"},{"X":"296.02","Y":"168.34"},{"X":"301.23","Y":"167.79"},{"X":"305.10","Y":"166.63"},{"X":"309.03","Y":"164.44"},{"X":"309.26","Y":"164.24"},{"X":"309.26","Y":"164.24"},{"X":"309.26","Y":"120.42"}],[{"X":"369.84","Y":"104.65"},{"X":"377.62","Y":"105.10"},{"X":"383.80","Y":"106.30"},{"X":"388.72","Y":"108.11"},{"X":"392.84","Y":"110.56"},{"X":"396.29","Y":"113.67"},{"X":"399.04","Y":"117.41"},{"X":"401.13","Y":"121.89"},{"X":"402.78","Y":"127.80"},{"X":"403.75","Y":"135.08"},{"X":"403.90","Y":"143.93"},{"X":"403.19","Y":"151.69"},{"X":"401.74","Y":"158.12"},{"X":"399.70","Y":"163.28"},{"X":"397.08","Y":"167.47"},{"X":"394.00","Y":"170.74"},{"X":"390.20","Y":"173.40"},{"X":"385.55","Y":"175.49"},{"X":"379.75","Y":"176.99"},{"X":"372.60","Y":"177.77"},{"X":"365.11","Y":"177.67"},{"X":"358.43","Y":"176.71"},{"X":"352.98","Y":"175.07"},{"X":"348.43","Y":"172.78"},{"X":"344.63","Y":"169.86"},{"X":"341.60","Y":"166.34"},{"X":"339.16","Y":"162.04"},{"X":"337.26","Y":"156.68"},{"X":"335.98","Y":"150.05"},{"X":"335.46","Y":"141.97"},{"X":"335.86","Y":"134.19"},{"X":"337.04","Y":"127.55"},{"X":"338.90","Y":"122.01"},{"X":"341.37","Y":"117.38"},{"X":"344.45","Y":"113.52"},{"X":"348.10","Y":"110.41"},{"X":"352.52","Y":"107.89"},{"X":"357.76","Y":"106.06"},{"X":"363.95","Y":"104.95"},{"X":"369.79","Y":"104.65"},{"X":"369.84","Y":"104.65"}],[{"X":"355.55","Y":"140.93"},{"X":"356.44","Y":"153.65"},{"X":"357.32","Y":"158.05"},{"X":"358.99","Y":"161.73"},{"X":"361.25","Y":"164.71"},{"X":"363.70","Y":"166.43"},{"X":"366.83","Y":"167.44"},{"X":"371.01","Y":"167.70"},{"X":"374.86","Y":"167.11"},{"X":"377.72","Y":"165.83"},{"X":"379.82","Y":"163.92"},{"X":"381.31","Y":"161.33"},{"X":"382.74","Y":"155.97"},{"X":"383.65","Y":"148.23"},{"X":"383.81","Y":"137.89"},{"X":"383.12","Y":"129.22"},{"X":"381.82","Y":"122.91"},{"X":"380.48","Y":"119.58"},{"X":"378.60","Y":"117.26"},{"X":"376.07","Y":"115.66"},{"X":"372.76","Y":"114.75"},{"X":"368.72","Y":"114.64"},{"X":"364.90","Y":"115.38"},{"X":"361.94","Y":"116.82"},{"X":"359.76","Y":"118.86"},{"X":"358.22","Y":"121.60"},{"X":"356.71","Y":"126.93"},{"X":"355.77","Y":"134.21"},{"X":"355.55","Y":"140.81"},{"X":"355.55","Y":"140.93"}],[{"X":"471.82","Y":"121.68"},{"X":"471.82","Y":"177.00"},{"X":"456.69","Y":"177.00"},{"X":"456.58","Y":"122.81"},{"X":"455.77","Y":"120.25"},{"X":"454.20","Y":"118.25"},{"X":"451.80","Y":"116.74"},{"X":"448.06","Y":"115.65"},{"X":"442.84","Y":"115.25"},{"X":"438.30","Y":"116.22"},{"X":"435.19","Y":"117.70"},{"X":"432.97","Y":"119.70"},{"X":"430.36","Y":"123.35"},{"X":"429.69","Y":"124.95"},{"X":"429.69","Y":"177.00"},{"X":"409.38","Y":"177.00"},{"X":"409.38","Y":"105.07"},{"X":"429.69","Y":"105.07"},{"X":"429.70","Y":"110.91"},{"X":"434.67","Y":"107.84"},{"X":"440.16","Y":"105.83"},{"X":"445.62","Y":"104.85"},{"X":"452.21","Y":"104.70"},{"X":"457.71","Y":"105.40"},{"X":"461.98","Y":"106.78"},{"X":"465.33","Y":"108.76"},{"X":"468.28","Y":"111.73"},{"X":"470.35","Y":"115.03"},{"X":"471.52","Y":"118.58"},{"X":"471.82","Y":"121.56"},{"X":"471.82","Y":"121.68"}]]';
        var text_clipping = '[[{"X":"115.54","Y":"216.41"},{"X":"113.01","Y":"217.26"},{"X":"105.79","Y":"218.58"},{"X":"96.36","Y":"219.18"},{"X":"88.73","Y":"218.69"},{"X":"82.86","Y":"217.48"},{"X":"78.40","Y":"215.73"},{"X":"74.91","Y":"213.42"},{"X":"72.12","Y":"210.49"},{"X":"69.88","Y":"206.77"},{"X":"68.13","Y":"201.83"},{"X":"66.93","Y":"195.19"},{"X":"66.45","Y":"186.51"},{"X":"67.03","Y":"179.19"},{"X":"68.36","Y":"173.03"},{"X":"70.25","Y":"168.30"},{"X":"72.58","Y":"164.82"},{"X":"75.62","Y":"161.94"},{"X":"79.35","Y":"159.71"},{"X":"84.02","Y":"158.09"},{"X":"89.93","Y":"157.11"},{"X":"96.97","Y":"156.93"},{"X":"105.18","Y":"157.69"},{"X":"114.58","Y":"159.65"},{"X":"116.44","Y":"168.59"},{"X":"110.93","Y":"166.65"},{"X":"105.50","Y":"165.51"},{"X":"98.32","Y":"165.06"},{"X":"94.16","Y":"165.58"},{"X":"90.96","Y":"166.82"},{"X":"88.62","Y":"168.68"},{"X":"86.96","Y":"171.17"},{"X":"85.31","Y":"175.67"},{"X":"84.32","Y":"181.28"},{"X":"84.15","Y":"188.62"},{"X":"84.83","Y":"196.53"},{"X":"86.18","Y":"202.53"},{"X":"87.64","Y":"205.97"},{"X":"89.52","Y":"208.29"},{"X":"92.02","Y":"209.92"},{"X":"95.18","Y":"210.85"},{"X":"99.07","Y":"210.96"},{"X":"105.48","Y":"210.28"},{"X":"111.84","Y":"208.54"},{"X":"116.32","Y":"206.45"},{"X":"116.62","Y":"206.17"},{"X":"115.55","Y":"216.31"},{"X":"115.54","Y":"216.41"}],[{"X":"120.11","Y":"219.00"},{"X":"120.11","Y":"132.31"},{"X":"137.23","Y":"132.31"},{"X":"137.23","Y":"219.00"},{"X":"137.23","Y":"219.00"},{"X":"120.11","Y":"219.00"}],[{"X":"153.34","Y":"132.13"},{"X":"156.60","Y":"132.56"},{"X":"159.17","Y":"133.77"},{"X":"161.19","Y":"135.77"},{"X":"162.61","Y":"138.40"},{"X":"163.19","Y":"141.48"},{"X":"162.87","Y":"144.75"},{"X":"161.71","Y":"147.51"},{"X":"159.79","Y":"149.80"},{"X":"157.51","Y":"151.22"},{"X":"154.46","Y":"151.96"},{"X":"151.02","Y":"151.84"},{"X":"148.34","Y":"150.92"},{"X":"146.08","Y":"149.20"},{"X":"144.28","Y":"146.63"},{"X":"143.38","Y":"143.78"},{"X":"143.37","Y":"140.64"},{"X":"144.20","Y":"137.77"},{"X":"145.94","Y":"135.15"},{"X":"148.14","Y":"133.37"},{"X":"150.80","Y":"132.38"},{"X":"153.33","Y":"132.13"},{"X":"153.34","Y":"132.13"}],[{"X":"144.58","Y":"219.00"},{"X":"144.58","Y":"157.06"},{"X":"161.88","Y":"157.06"},{"X":"161.88","Y":"219.00"},{"X":"161.88","Y":"219.00"},{"X":"144.58","Y":"219.00"}],[{"X":"168.78","Y":"243.93"},{"X":"168.78","Y":"157.06"},{"X":"186.09","Y":"157.06"},{"X":"186.19","Y":"161.44"},{"X":"191.55","Y":"158.75"},{"X":"196.41","Y":"157.22"},{"X":"201.17","Y":"156.70"},{"X":"207.60","Y":"157.21"},{"X":"212.99","Y":"158.51"},{"X":"216.03","Y":"160.11"},{"X":"219.02","Y":"162.82"},{"X":"222.00","Y":"166.95"},{"X":"223.86","Y":"171.04"},{"X":"225.25","Y":"176.56"},{"X":"226.01","Y":"184.02"},{"X":"225.94","Y":"191.67"},{"X":"225.03","Y":"199.56"},{"X":"223.55","Y":"205.37"},{"X":"221.48","Y":"209.86"},{"X":"218.90","Y":"213.53"},{"X":"216.12","Y":"216.03"},{"X":"213.05","Y":"217.58"},{"X":"207.99","Y":"218.94"},{"X":"201.87","Y":"219.54"},{"X":"195.30","Y":"219.05"},{"X":"189.90","Y":"217.79"},{"X":"186.09","Y":"216.23"},{"X":"186.09","Y":"243.93"},{"X":"186.09","Y":"243.93"},{"X":"168.78","Y":"243.93"}],[{"X":"186.09","Y":"170.27"},{"X":"186.13","Y":"208.05"},{"X":"189.79","Y":"210.09"},{"X":"193.53","Y":"211.16"},{"X":"197.86","Y":"211.53"},{"X":"201.86","Y":"210.97"},{"X":"204.91","Y":"209.73"},{"X":"207.25","Y":"207.87"},{"X":"209.01","Y":"205.27"},{"X":"210.72","Y":"200.64"},{"X":"211.90","Y":"194.30"},{"X":"212.32","Y":"186.82"},{"X":"211.80","Y":"179.19"},{"X":"210.69","Y":"174.07"},{"X":"209.11","Y":"170.68"},{"X":"207.06","Y":"168.30"},{"X":"204.40","Y":"166.63"},{"X":"200.81","Y":"165.59"},{"X":"196.18","Y":"165.25"},{"X":"192.24","Y":"166.16"},{"X":"188.91","Y":"167.87"},{"X":"186.21","Y":"169.99"},{"X":"186.09","Y":"170.26"},{"X":"186.09","Y":"170.27"}],[{"X":"231.09","Y":"243.93"},{"X":"231.09","Y":"157.06"},{"X":"248.39","Y":"157.06"},{"X":"248.50","Y":"161.44"},{"X":"253.86","Y":"158.75"},{"X":"258.72","Y":"157.22"},{"X":"263.48","Y":"156.70"},{"X":"269.91","Y":"157.21"},{"X":"275.30","Y":"158.51"},{"X":"278.34","Y":"160.11"},{"X":"281.33","Y":"162.82"},{"X":"284.31","Y":"166.96"},{"X":"286.17","Y":"171.04"},{"X":"287.56","Y":"176.57"},{"X":"288.32","Y":"184.02"},{"X":"288.25","Y":"191.67"},{"X":"287.34","Y":"199.56"},{"X":"285.86","Y":"205.37"},{"X":"283.79","Y":"209.86"},{"X":"281.21","Y":"213.53"},{"X":"278.43","Y":"216.04"},{"X":"275.35","Y":"217.58"},{"X":"270.29","Y":"218.94"},{"X":"264.18","Y":"219.54"},{"X":"257.60","Y":"219.05"},{"X":"252.21","Y":"217.78"},{"X":"248.40","Y":"216.23"},{"X":"248.40","Y":"243.93"},{"X":"248.40","Y":"243.93"},{"X":"231.09","Y":"243.93"}],[{"X":"248.39","Y":"170.27"},{"X":"248.44","Y":"208.05"},{"X":"252.10","Y":"210.09"},{"X":"255.84","Y":"211.16"},{"X":"260.17","Y":"211.53"},{"X":"264.17","Y":"210.97"},{"X":"267.22","Y":"209.73"},{"X":"269.56","Y":"207.87"},{"X":"271.32","Y":"205.27"},{"X":"273.03","Y":"200.64"},{"X":"274.21","Y":"194.30"},{"X":"274.63","Y":"186.82"},{"X":"274.12","Y":"179.19"},{"X":"273.00","Y":"174.07"},{"X":"271.42","Y":"170.68"},{"X":"269.38","Y":"168.30"},{"X":"266.72","Y":"166.64"},{"X":"263.12","Y":"165.59"},{"X":"258.49","Y":"165.25"},{"X":"254.56","Y":"166.16"},{"X":"251.23","Y":"167.86"},{"X":"248.52","Y":"169.99"},{"X":"248.40","Y":"170.26"},{"X":"248.39","Y":"170.27"}],[{"X":"302.11","Y":"132.13"},{"X":"305.37","Y":"132.56"},{"X":"307.93","Y":"133.77"},{"X":"309.95","Y":"135.77"},{"X":"311.37","Y":"138.40"},{"X":"311.95","Y":"141.48"},{"X":"311.63","Y":"144.75"},{"X":"310.47","Y":"147.51"},{"X":"308.56","Y":"149.80"},{"X":"306.27","Y":"151.22"},{"X":"303.22","Y":"151.96"},{"X":"299.79","Y":"151.84"},{"X":"297.10","Y":"150.92"},{"X":"294.85","Y":"149.20"},{"X":"293.04","Y":"146.63"},{"X":"292.14","Y":"143.78"},{"X":"292.13","Y":"140.64"},{"X":"292.97","Y":"137.77"},{"X":"294.71","Y":"135.15"},{"X":"296.90","Y":"133.37"},{"X":"299.56","Y":"132.38"},{"X":"302.10","Y":"132.13"},{"X":"302.11","Y":"132.13"}],[{"X":"293.34","Y":"219.00"},{"X":"293.34","Y":"157.06"},{"X":"310.65","Y":"157.06"},{"X":"310.65","Y":"219.00"},{"X":"310.65","Y":"219.00"},{"X":"293.34","Y":"219.00"}],[{"X":"371.24","Y":"171.37"},{"X":"371.24","Y":"219.00"},{"X":"358.21","Y":"219.00"},{"X":"358.11","Y":"172.27"},{"X":"357.35","Y":"170.01"},{"X":"355.81","Y":"168.19"},{"X":"353.32","Y":"166.83"},{"X":"349.52","Y":"165.99"},{"X":"345.63","Y":"165.91"},{"X":"341.71","Y":"166.90"},{"X":"339.11","Y":"168.36"},{"X":"336.70","Y":"171.02"},{"X":"335.06","Y":"173.87"},{"X":"334.96","Y":"219.00"},{"X":"317.48","Y":"219.00"},{"X":"317.48","Y":"157.06"},{"X":"334.96","Y":"157.06"},{"X":"335.01","Y":"162.07"},{"X":"339.49","Y":"159.34"},{"X":"344.58","Y":"157.56"},{"X":"349.77","Y":"156.78"},{"X":"355.76","Y":"156.84"},{"X":"360.47","Y":"157.70"},{"X":"364.07","Y":"159.18"},{"X":"366.81","Y":"161.26"},{"X":"369.25","Y":"164.29"},{"X":"370.67","Y":"167.42"},{"X":"371.23","Y":"170.82"},{"X":"371.24","Y":"171.27"},{"X":"371.24","Y":"171.37"}],[{"X":"401.90","Y":"232.76"},{"X":"407.58","Y":"232.33"},{"X":"411.33","Y":"231.29"},{"X":"413.88","Y":"229.75"},{"X":"415.39","Y":"227.89"},{"X":"416.16","Y":"225.48"},{"X":"416.21","Y":"216.25"},{"X":"411.46","Y":"218.08"},{"X":"405.72","Y":"219.22"},{"X":"399.44","Y":"219.51"},{"X":"393.19","Y":"218.76"},{"X":"388.30","Y":"217.32"},{"X":"385.44","Y":"215.70"},{"X":"382.67","Y":"212.97"},{"X":"380.07","Y":"208.95"},{"X":"378.24","Y":"204.52"},{"X":"376.93","Y":"198.51"},{"X":"376.28","Y":"190.44"},{"X":"376.52","Y":"182.65"},{"X":"377.58","Y":"175.38"},{"X":"379.16","Y":"170.07"},{"X":"381.22","Y":"166.08"},{"X":"384.14","Y":"162.28"},{"X":"387.11","Y":"159.77"},{"X":"390.08","Y":"158.35"},{"X":"395.48","Y":"157.12"},{"X":"401.76","Y":"156.70"},{"X":"406.66","Y":"157.40"},{"X":"412.02","Y":"159.31"},{"X":"416.24","Y":"161.51"},{"X":"416.24","Y":"157.06"},{"X":"433.55","Y":"157.06"},{"X":"433.43","Y":"223.84"},{"X":"432.54","Y":"227.93"},{"X":"430.90","Y":"231.30"},{"X":"428.49","Y":"234.16"},{"X":"425.23","Y":"236.55"},{"X":"420.86","Y":"238.51"},{"X":"415.19","Y":"239.93"},{"X":"407.89","Y":"240.69"},{"X":"399.04","Y":"240.53"},{"X":"391.61","Y":"239.58"},{"X":"384.09","Y":"237.51"},{"X":"382.01","Y":"236.48"},{"X":"380.74","Y":"226.84"},{"X":"385.59","Y":"229.19"},{"X":"391.82","Y":"231.36"},{"X":"398.16","Y":"232.49"},{"X":"401.75","Y":"232.75"},{"X":"401.90","Y":"232.76"}],[{"X":"416.25","Y":"170.27"},{"X":"414.97","Y":"169.05"},{"X":"410.96","Y":"166.71"},{"X":"406.83","Y":"165.39"},{"X":"404.44","Y":"165.28"},{"X":"400.31","Y":"165.96"},{"X":"397.15","Y":"167.34"},{"X":"394.75","Y":"169.35"},{"X":"392.82","Y":"172.20"},{"X":"391.40","Y":"176.14"},{"X":"390.35","Y":"182.50"},{"X":"390.04","Y":"190.14"},{"X":"390.67","Y":"197.15"},{"X":"391.97","Y":"202.39"},{"X":"393.71","Y":"206.20"},{"X":"395.76","Y":"208.58"},{"X":"398.42","Y":"210.25"},{"X":"401.86","Y":"211.27"},{"X":"406.04","Y":"211.51"},{"X":"410.92","Y":"210.69"},{"X":"414.49","Y":"209.16"},{"X":"416.25","Y":"208.01"},{"X":"416.25","Y":"170.27"},{"X":"416.25","Y":"170.27"}]]';
        // return {
        //   "ss": deserialize_clipper_poly(text_polygon),
        //   "cc": deserialize_clipper_poly(text_clipping)
        // };
        return text_polygon;
    },
    createFace: function (point2Ds, faceType, t, opt) {
        var contours;
        if (!point2Ds.type ||
            point2Ds.type && point2Ds.type === "paths" ||
            point2Ds.type && point2Ds.type === "") {
            contours = [{
                "outer": point2Ds,
                "holes": [
                    [ /*points*/ ]
                ]
            }];
        } else if (point2Ds.type === "expolygons") {
            contours = point2Ds;
        }

        if (contours && contours[0] && contours[0].outer && contours[0].outer.length > 2) {
            var rt = 0;
            if (t) {
                rt = t;
            } else {
                //console.error("need t to create face");
            }
            var _opt = {
                t: rt,
                contours: contours,
                type: faceType,
                timestamp: Number(new Date())
            }
            $.extend(_opt, opt);
            return new OA.Face(_opt);

        } else {
            return null;
        }
    },
    log10: function(val) {
        return Math.log(val) / Math.LN10;
    },
    modifyFloatPoint: function(num) {
        var clipScale = OA.clipScale;
        var size = OA.Utils.log10(clipScale);
        size = Math.floor(size+0.5); //!!! Javascript float error @@!
        return OA.Utils.formatFloat(num, size);
    },
    mf: function(num){
        return OA.Utils.modifyFloatPoint(num);
    },
    adjustFloat: function(obj) {
        var mf = OA.Utils.modifyFloatPoint;
        if(obj instanceof THREE.Vector3){
            var p = new THREE.Vector3(mf(obj.x), mf(obj.y), mf(obj.z));
            return p;
        }
    },
    subdivision: function(sourceP2Ds, xLimit) {
        // point2Ds = newPoint2Ds;
        var newP2Ary = [];
        var pLen = sourceP2Ds.length;
        for (var i = 0; i < pLen; i++) {
            var p1, p2;
            if (i === 0) {
                p1 = sourceP2Ds[pLen - 1];
                p2 = sourceP2Ds[0];
            } else {
                p1 = sourceP2Ds[i - 1];
                p2 = sourceP2Ds[i];
            }
            if (p1.Y == p2.Y && Math.abs(p1.X - p2.X) > xLimit) {
                newP2Ary.push(p1);
                newP2Ary.push(p2);
                continue;
            }
            var Q = {
                X: 0.75 * p1.X + 0.25 * p2.X,
                Y: 0.75 * p1.Y + 0.25 * p2.Y
            };
            var P = {
                X: 0.25 * p1.X + 0.75 * p2.X,
                Y: 0.25 * p1.Y + 0.75 * p2.Y
            };

            newP2Ary.push(Q);
            newP2Ary.push(P);
        }
        return newP2Ary;
    },
    createTextPolys: function(text, size, bold, italic) {
        if(size === undefined){
            size = 20;
        }
        if(text === undefined){
            text =  "Text";
        }
        var shape = new THREE.TextGeometry(text, {
            font: 'helvetiker',
            //font: 'mickey m tfb',
            //font: "jigsaw pieces tfb",
            //font: "cityscape?",
            //font: "housing",
            weight: bold ? 'bold' : "normal", //normal or bold
            style: italic ? "italic" : "normal", //normal, italic
            bevelSegments: 1,
            bevelEnabled: false,
            bevelThickness: 1,
            bevelSize: 1,
            curveSegments: 1,
            size: size,
            height: 1
        });
        var xOffset = 0;
        var yOffset = 0;
        var path = [];
        var p2dPath = [];

        var exPaths = [];
        $.each(shape.textShapes, function(ts, shape) {
            var exPath = {
                "outer": [],
                "holes": [
                    /*[ ]*/
                ]
            };
            $.each(shape.curves, function(i, p) {
                var pp = {
                    X: p.v1.x + xOffset,
                    Y: -p.v1.y + yOffset
                };
                path.push(pp);
                exPath.outer.push(pp);
                pp = {
                    X: p.v2.x + xOffset,
                    Y: -p.v2.y + yOffset
                };
                path.push(pp);
                exPath.outer.push(pp);
                //exPath.outer.push(pp);
            });

            OA.Utils.modifyPathOrientation(exPath.outer, true);
            var holes = [];
            $.each(shape.holes, function(i, h) {
                var hole = [];
                $.each(h.curves, function(i, p) {
                    var pp = {
                        X: p.v1.x + xOffset,
                        Y: -p.v1.y + yOffset
                    };
                    hole.push(pp);
                    pp = {
                        X: p.v2.x + xOffset,
                        Y: -p.v2.y + yOffset
                    };
                    hole.push(pp);
                });
                OA.Utils.modifyPathOrientation(hole, false);
                holes.push(hole);
            });

            exPath.holes = holes;
            exPaths.push(exPath);
        });
        return exPaths;
    },
    modifyPathOrientation: function(p2dAry, isCW){
        if(isCW === undefined){
            isCW = true;
        }
        var orientation = ClipperLib.Clipper.Orientation(p2dAry);
        if (orientation === isCW) {
            p2dAry.reverse();
            //console.error("=reverse path=");
        }
    },
    exPolygonsClean: function(exPolygons, distance){
        // $.each(exPolygons, function(i, exPoly){
        //   exPoly.outer = ClipperLib.Clipper.CleanPolygon(exPoly.outer, distance);
        //   exPoly.holes = ClipperLib.Clipper.CleanPolygons(exPoly.holes, distance);
        // });

        $.each(exPolygons, function(i, exPoly){
            exPoly.outer = ClipperLib.JS.Clean(exPoly.outer, distance);
            //exPoly.outer = ClipperLib.Clipper.SimplifyPolygons(exPoly.outer, ClipperLib.PolyFillType.pftEvenOdd);
            exPoly.holes = ClipperLib.JS.Clean(exPoly.holes, distance);
            //exPoly.holes = ClipperLib.Clipper.SimplifyPolygons(exPoly.holes, ClipperLib.PolyFillType.pftEvenOdd);
        });

        //tunedPath2 = ClipperLib.Clipper.SimplifyPolygons(tunedPath, ClipperLib.PolyFillType.pftNonZero);
    },
    maxMinFns: {
        minP: function(pnts) {
            return pnts[0].X < pnts[1].X ? pnts[0] : pnts[1];
        },
        maxP: function(pnts) {
            return pnts[0].X > pnts[1].X ? pnts[0] : pnts[1];
        },
        isIn: function(p, ln) {
            var m = OA.Utils.maxMinFns;
            return m.minP(ln).X <= p.X && p.X <= m.maxP(ln).X;
        },
        maxLP: function(ln1, ln2) {
            var m = OA.Utils.maxMinFns;
            var maxP1 = m.maxP(ln1);
            var maxP2 = m.maxP(ln2);
            return maxP1 >= maxP2 ? maxP1 : maxP2;
        },
        minLP: function(ln1, ln2) {
            var m = OA.Utils.maxMinFns;
            var minP1 = m.minP(ln1);
            var minP2 = m.minP(ln2);
            return minP1 <= minP2 ? minP1 : minP2;

        },
        maxMinLP: function(ln1, ln2) {
            var m = OA.Utils.maxMinFns;
            var maxP1 = m.maxP(ln1);
            var maxP2 = m.maxP(ln2);
            return maxP1.X <= maxP2.X ? maxP1 : maxP2;
        },
        minMaxLP: function(ln1, ln2) {
            var m = OA.Utils.maxMinFns;
            var minP1 = m.minP(ln1);
            var minP2 = m.minP(ln2);
            return minP1.X >= minP2.X ? minP1 : minP2;
        }
    },
    facesClone: function(faces, faceCreateMode) {
        var newFaces = [];
        if(faceCreateMode === undefined){
            faceCreateMode = 0; //default is faces
        }
        $.each(faces, function(i, f) {
            if(f.faceCreateMode===faceCreateMode){
                newFaces.push(f.clone());
            }
        });
        return newFaces;
    },
    facesCloneAllMode : function(faces) {
        var res = {
            "0": [],
            "1": [],
            "2": []
        };

        $.each(faces, function(i, f) {
            if(res[f.faceCreateMode]){
                res[f.faceCreateMode].push(f.clone());
            }else{
                console.error("wrong face without create mode");
            }
        });

        return res;
    },

    D3To2: function(d3p, t){
        //return {X: d3p.x, Y: t - d3p.y};
        var mf = OA.Utils.mf;
        return {X: mf(d3p.x), Y: mf(t - d3p.y)};
    },
    D2To3: function(d2p, t, type){
        var d3p = null;
        if(type === undefined || type === "VFACE"){
            d3p = new THREE.Vector3(d2p.X, t - d2p.Y , t);
        }else if(type === "HFACE"){
            d3p = new THREE.Vector3(d2p.X, t , t + d2p.y);
        }
        if(d3p!=null){
            d3p = OA.Utils.adjustFloat(d3p);
        }
        return d3p;
    },
    simplePathToPoly: function(path){
        return [{ "outer": path, "holes": []}];
    },
    scaleDownExPolygon: function(exPolygons, scale) {
        var a, i, j, exPolygon, holes, outer, polygon;
        if (!scale) scale = 1;
        for (a = 0, alen = exPolygons.length; a < alen; a++) {
            exPolygon = exPolygons[a];
            holes = exPolygon.holes;
            outer = exPolygon.outer;
            for (i = 0, ilen = holes.length; i < ilen; i++) {
                polygon = holes[i];

                for (j = 0, jlen = polygon.length; j < jlen; j++) {
                    point = polygon[j];
                    point.X = Number(point.X) / scale;
                    point.Y = Number(point.Y) / scale;
                }
            }
            for (j = 0, jlen = outer.length; j < jlen; j++) {
                point = outer[j];
                point.X = Number(point.X) / scale;
                point.Y = Number(point.Y) / scale;
            }
        }
        return exPolygons;
    },
    cleanObject3D: function(object3D) {
        var children = object3D.children;
        var len = children.length;
        for(var i=0; i<len;i++){
            object3D.remove(children[0]);
        }
    },
    ary2Point2Ds: function(ary){
        var point2Ds = ary.map(function(i) {
            return {
                "X": i[0],
                "Y": i[1]
            };
        });
        return point2Ds;
    },
    checkEqualPosition: function(pos1, pos2){
        if(pos1 === undefined||pos2===undefined){
            return false;
        }
        if(pos1.x === pos2.x &&
            pos1.y === pos2.y &&
            pos1.z === pos2.z){
            return true;
        }else{
            return false;
        }
    },
    setObject3DVisible: function(object3D, visible){
        if(object3D.isVisible === undefined || object3D.isVisible !== visible){
            object3D.traverse( function ( object ) { object.visible = !!visible; } );
            object3D.isVisible = visible;
        }
    },
    texture: {
        ready: false,
        data: {
            movePointTexture: null,
            movePointFillTexture: null
        },
        adjustTextureSize: function(maxWidth, imageSize, isFill){
            if(isFill){
                var w = imageSize/100;
            }else{
                var w = 2000/imageSize;
            }
            var repeateSize = w/(maxWidth*10);//for 128 * 128 image
            return repeateSize;
        },
        loadAllTexture: function(modelOption){
            if(modelOption === undefined){
                modelOption = {
                    cardW: 100,
                    cardH: 100
                };
            }
            OA.Utils.texture.ready = true;
            OA.Utils.texture.data.movePointTexture = THREE.ImageUtils.loadTexture("img/cborder.png");
            OA.Utils.texture.data.movePointFillTexture = THREE.ImageUtils.loadTexture("img/cfill.png");

            var maxW = modelOption.cardW > modelOption.cardH ? modelOption.cardW : modelOption.cardH;
            if (OA.paperTexture) {
                var info = OA.paperTextureInfo;
                OA.Utils.texture.data.paper = THREE.ImageUtils.loadTexture(info.src);
                var imageSize = info.size; //must change this vaule by loaded image
                var paperT = OA.Utils.texture.data.paper;
                if (info.isFill) {
                    //paperT.repeat = 0;
                }
                paperT.wrapS = paperT.wrapT = THREE.RepeatWrapping;
                //paperT.anisotropy = 1;
                paperT.offset.y = info.offset && info.offset.y?info.offset.y: 0.5;
                paperT.offset.x = info.offset && info.offset.x?info.offset.x: 0;
                paperT.flipY = false;
                var repeateSize = OA.Utils.texture.adjustTextureSize(maxW, imageSize, info.isFill); //isFull(true) or repeat
                paperT.repeat.set(repeateSize, repeateSize);
            }
        },
        getTexture: function(){
            if(OA.Utils.texture.ready){
                return OA.Utils.texture.data;
            }else{
                OA.Utils.texture.loadAllTexture();
                return OA.Utils.texture.data;
            }
        }
    },
    formatFloat: function (num, pos) {
        var size = Math.pow(10, pos);
        return Math.round(num * size) / size;
    },
    debugaxis: function(scene, oa, axisLength) {
        //Shorten the vertex function
        function v(x, y, z) {
            return new THREE.Vector3(x, y, z);
        }
        //Create axis (point1, point2, colour)
        function createAxis(p1, p2, color) {
            var line, lineGeometry = new THREE.Geometry(),
                lineMat = new THREE.LineBasicMaterial({
                    color: color,
                    lineWidth: 1
                });
            lineGeometry.vertices.push(p1, p2);
            line = new THREE.Line(lineGeometry, lineMat);
            scene.add(line);
        }
        createAxis(v(-axisLength, 0, 0), v(axisLength, 0, 0), 0xFF0000);
        createAxis(v(0, -axisLength, 0), v(0, axisLength, 0), 0x00FF00);
        createAxis(v(oa.getCardW() / 2, -axisLength, 0), v(oa.getCardW() / 2, axisLength, 0), 0x00FFFF);
        createAxis(v(0, 0, -axisLength), v(0, 0, axisLength), 0x0000FF);
    },
    getTestExPolygonTree: function(){
        return [{"outer":[{"X":103.181,"Y":220.799},{"X":104.364,"Y":190.337},{"X":99.849,"Y":182.369},{"X":104.803,"Y":183.405},{"X":105.069,"Y":164.693},{"X":101.856,"Y":144.889},{"X":96.602,"Y":131.47},{"X":94.137,"Y":128.41},{"X":87.938,"Y":126.121},{"X":68.853,"Y":124.712},{"X":55.191,"Y":137.809},{"X":54.012,"Y":135.274},{"X":57.142,"Y":133.283},{"X":55.261,"Y":131.519},{"X":49.807,"Y":133.03},{"X":48.27,"Y":137.16},{"X":48.762,"Y":142.672},{"X":47.331,"Y":146.85},{"X":44.672,"Y":148.789},{"X":45.573,"Y":135.814},{"X":43.345,"Y":140.126},{"X":42.719,"Y":137.016},{"X":36.671,"Y":141.24},{"X":33.291,"Y":130.355},{"X":37.363,"Y":127.208},{"X":36.772,"Y":122.604},{"X":39.952,"Y":125.467},{"X":42.663,"Y":124.482},{"X":44.19,"Y":120.736},{"X":43.192,"Y":117.816},{"X":36.355,"Y":119.368},{"X":34.878,"Y":115.119},{"X":38.146,"Y":113.954},{"X":35.52,"Y":109.941},{"X":36.896,"Y":107.535},{"X":40.517,"Y":109.3},{"X":48.975,"Y":99.851},{"X":54.198,"Y":97.87},{"X":55.123,"Y":96.323},{"X":53.293,"Y":92.238},{"X":47.891,"Y":91.602},{"X":44.017,"Y":97.261},{"X":43.072,"Y":95.066},{"X":44.522,"Y":90.935},{"X":44.008,"Y":88.647},{"X":40.073,"Y":88.1},{"X":43.185,"Y":74.685},{"X":45.661,"Y":77.401},{"X":52.455,"Y":76.115},{"X":52.093,"Y":71.941},{"X":48.26,"Y":65.59},{"X":52.041,"Y":62.795},{"X":54.785,"Y":62.356},{"X":60.725,"Y":53.764},{"X":64.398,"Y":54.837},{"X":61.601,"Y":44.213},{"X":62.183,"Y":42.429},{"X":68.685,"Y":38.57},{"X":70.857,"Y":43.864},{"X":75.301,"Y":36.658},{"X":79.74,"Y":34.903},{"X":81.903,"Y":30.601},{"X":86.186,"Y":30.127},{"X":96.983,"Y":24.682},{"X":99.042,"Y":24.701},{"X":102.3,"Y":28.63},{"X":103.329,"Y":25.855},{"X":118.837,"Y":26.405},{"X":120.026,"Y":29.068},{"X":121.061,"Y":27.36},{"X":125.084,"Y":25.838},{"X":126.883,"Y":26.514},{"X":127.849,"Y":38.57},{"X":128.615,"Y":33.388},{"X":130.273,"Y":31.36},{"X":131.323,"Y":33.438},{"X":132.884,"Y":29.553},{"X":134.28,"Y":32.955},{"X":133.89,"Y":37.482},{"X":135.186,"Y":37.093},{"X":138.311,"Y":30.826},{"X":140.772,"Y":37.436},{"X":141.693,"Y":35.85},{"X":144.879,"Y":37.805},{"X":142.882,"Y":42.808},{"X":148.072,"Y":39.964},{"X":157.87,"Y":48.073},{"X":158.349,"Y":54.987},{"X":159.992,"Y":53.247},{"X":165.235,"Y":59.029},{"X":168.358,"Y":68.004},{"X":166.742,"Y":72.543},{"X":165.338,"Y":71.529},{"X":160.255,"Y":72.686},{"X":158.431,"Y":75.073},{"X":161.396,"Y":76.487},{"X":168.524,"Y":74.919},{"X":169.529,"Y":78.059},{"X":168.336,"Y":85.228},{"X":173.242,"Y":81.367},{"X":174.67,"Y":82.369},{"X":173.259,"Y":76.874},{"X":174.359,"Y":75.745},{"X":178.357,"Y":80.253},{"X":179.604,"Y":88.167},{"X":182.692,"Y":88.307},{"X":183.609,"Y":92.202},{"X":182.202,"Y":94.947},{"X":180.434,"Y":95.677},{"X":181.412,"Y":98.679},{"X":183.225,"Y":97.639},{"X":185.774,"Y":116.788},{"X":184.176,"Y":122.163},{"X":185.003,"Y":125.744},{"X":178.737,"Y":137.703},{"X":176.195,"Y":132.677},{"X":178.874,"Y":144.616},{"X":176.53,"Y":145.613},{"X":171.927,"Y":132.208},{"X":159.229,"Y":117.148},{"X":154.959,"Y":115.578},{"X":154.223,"Y":118.482},{"X":151.973,"Y":119.361},{"X":153.848,"Y":123.672},{"X":152.992,"Y":125.585},{"X":151.361,"Y":125.072},{"X":151.736,"Y":135.538},{"X":152.862,"Y":136.284},{"X":153.905,"Y":134.54},{"X":153.711,"Y":137.53},{"X":151.96,"Y":137.511},{"X":146.422,"Y":122.475},{"X":143.737,"Y":118.367},{"X":132.696,"Y":126.829},{"X":117.466,"Y":150.083},{"X":112.725,"Y":162.23},{"X":112.52,"Y":196.304},{"X":115.346,"Y":220.799}],"holes":[[{"X":149.952,"Y":51.338},{"X":150.825,"Y":47.383},{"X":149.554,"Y":48.757}],[{"X":69.191,"Y":54.204},{"X":68.924,"Y":49.128},{"X":67.899,"Y":48.266}],[{"X":117.109,"Y":140.339},{"X":125.864,"Y":116.268},{"X":126.352,"Y":110.58},{"X":122.683,"Y":117.966}],[{"X":104.36,"Y":136.75},{"X":100.006,"Y":83.235},{"X":97.063,"Y":84.608},{"X":95.913,"Y":95.243},{"X":93.732,"Y":101.053},{"X":95.356,"Y":116.686}],[{"X":45.664,"Y":128.24},{"X":48.032,"Y":126.672},{"X":47.016,"Y":123.901},{"X":44.185,"Y":126.829}],[{"X":172.795,"Y":126.642},{"X":172.545,"Y":123.761},{"X":167.545,"Y":118.809}],[{"X":107.355,"Y":55.057},{"X":107.018,"Y":52.308},{"X":106.193,"Y":52.924}],[{"X":179.526,"Y":124.933},{"X":180.705,"Y":124.515},{"X":178.907,"Y":123.02}],[{"X":53.288,"Y":123.566},{"X":59.22,"Y":121.336},{"X":78.45,"Y":119.193},{"X":70.689,"Y":115.628},{"X":62.414,"Y":114.594},{"X":53.318,"Y":118.598},{"X":52.339,"Y":122.518}],[{"X":85.362,"Y":120.083},{"X":86.531,"Y":119.917},{"X":78.853,"Y":106.531},{"X":71.625,"Y":97.485},{"X":71.301,"Y":98.877},{"X":64.513,"Y":98.961},{"X":67.077,"Y":108.022}],[{"X":149.92,"Y":118.838},{"X":150.14,"Y":114.686},{"X":148.165,"Y":115.206},{"X":148.026,"Y":117.129}],[{"X":134.804,"Y":118.44},{"X":140.042,"Y":114.261},{"X":141.194,"Y":111.614},{"X":140.626,"Y":109.57},{"X":136.364,"Y":113.732}],[{"X":180.366,"Y":116.489},{"X":181.073,"Y":115.652},{"X":179.356,"Y":113.954},{"X":178.754,"Y":115.154}],[{"X":90.309,"Y":115.534},{"X":79.772,"Y":93.054},{"X":85.146,"Y":109.227}],[{"X":182.402,"Y":113.665},{"X":182.443,"Y":110.685},{"X":181.359,"Y":111.614}],[{"X":55.341,"Y":111.837},{"X":57.863,"Y":110.873},{"X":60.011,"Y":106.122},{"X":53.019,"Y":111.614}],[{"X":165.02,"Y":111.614},{"X":165.861,"Y":110.999},{"X":164.028,"Y":110.999}],[{"X":130.927,"Y":111.506},{"X":134.03,"Y":106.264},{"X":132.577,"Y":105.091}],[{"X":144.754,"Y":110.413},{"X":147.103,"Y":108.35},{"X":142.043,"Y":106.954}],[{"X":63.015,"Y":109.3},{"X":64.361,"Y":108.284},{"X":62.673,"Y":107.573},{"X":61.917,"Y":108.622}],[{"X":109.357,"Y":106.986},{"X":113.698,"Y":100.241},{"X":115.484,"Y":92.472},{"X":112.667,"Y":84.929},{"X":109.008,"Y":81.867},{"X":107.649,"Y":102.006}],[{"X":54.854,"Y":106.986},{"X":57.571,"Y":102.662},{"X":56.336,"Y":102.669},{"X":54.054,"Y":106.186}],[{"X":179.811,"Y":105.113},{"X":181.698,"Y":103.895},{"X":181.434,"Y":102.679},{"X":178.454,"Y":102.679}],[{"X":108.201,"Y":159.955},{"X":113.362,"Y":134.854},{"X":115.184,"Y":111.846},{"X":114.144,"Y":107.699},{"X":112.611,"Y":109.222},{"X":109.523,"Y":119.341}],[{"X":88.282,"Y":100.121},{"X":90.571,"Y":89.911},{"X":89.545,"Y":85.085},{"X":85.997,"Y":85.742},{"X":86.185,"Y":93.779}],[{"X":77.239,"Y":98.371},{"X":74.257,"Y":90.532},{"X":68.27,"Y":88.13}],[{"X":59.163,"Y":94.781},{"X":61.287,"Y":92.082},{"X":59.71,"Y":88.948},{"X":54.89,"Y":87.878},{"X":55.847,"Y":91.156}],[{"X":156.428,"Y":94.218},{"X":158.058,"Y":92.011},{"X":157.383,"Y":90.475},{"X":153.958,"Y":92.285}],[{"X":171.563,"Y":92.566},{"X":173.544,"Y":88.952},{"X":172.799,"Y":88.055},{"X":170.49,"Y":91.299}],[{"X":77.032,"Y":89.283},{"X":75.208,"Y":84.541},{"X":69.734,"Y":77.597},{"X":68.922,"Y":79.777}],[{"X":119.637,"Y":88.115},{"X":120.304,"Y":77.135},{"X":119.264,"Y":72.438},{"X":117.388,"Y":73.992},{"X":117.516,"Y":80.792}],[{"X":142.69,"Y":85.445},{"X":144.136,"Y":81.354},{"X":143.001,"Y":80.859}],[{"X":148.866,"Y":85.224},{"X":153.643,"Y":80.839},{"X":149.794,"Y":81.881}],[{"X":165.286,"Y":85.199},{"X":164.7,"Y":83.746},{"X":160.512,"Y":81.803},{"X":160.192,"Y":82.909}],[{"X":130.502,"Y":84.798},{"X":132.592,"Y":78.84},{"X":131.36,"Y":78.336}],[{"X":62.515,"Y":84.688},{"X":63.7,"Y":82.176},{"X":60.188,"Y":74.465},{"X":54.168,"Y":78.902},{"X":56.52,"Y":81.653}],[{"X":48.19,"Y":81.653},{"X":51.148,"Y":79.669},{"X":47.538,"Y":77.053},{"X":45.324,"Y":79.736}],[{"X":84.601,"Y":80.65},{"X":87.17,"Y":79.387},{"X":88.897,"Y":74.98},{"X":85.458,"Y":75.507}],[{"X":76.947,"Y":79.839},{"X":76.473,"Y":77.849},{"X":73.85,"Y":76.163}],[{"X":96.853,"Y":79.315},{"X":98.44,"Y":77.997},{"X":97.359,"Y":77},{"X":95.923,"Y":78.708}],[{"X":66.177,"Y":75.689},{"X":67.546,"Y":73.526},{"X":63.281,"Y":72.581}],[{"X":130.539,"Y":73.142},{"X":131.294,"Y":68.99},{"X":130.02,"Y":64.963}],[{"X":65.017,"Y":61.368},{"X":64.345,"Y":59.693},{"X":61.299,"Y":58.5},{"X":60.496,"Y":59.851}],[{"X":135.018,"Y":100.857},{"X":137.266,"Y":99.498},{"X":136.611,"Y":98.542},{"X":133.988,"Y":100.292}]]},{"outer":[{"X":38.514,"Y":145.195},{"X":37.752,"Y":142.742},{"X":39.6,"Y":142.152}],"holes":[]},{"outer":[{"X":157.87,"Y":124.933},{"X":156.944,"Y":122.296},{"X":160.246,"Y":121.59}],"holes":[]},{"outer":[{"X":47.011,"Y":72.151},{"X":46.675,"Y":68.557},{"X":47.796,"Y":70.737}],"holes":[]},{"outer":[{"X":54.646,"Y":61.208},{"X":53.213,"Y":60.121},{"X":54.348,"Y":57.995},{"X":55.63,"Y":58.915}],"holes":[]}];
    },
    getTestExPolygon: function(){

        return [{"outer":[{"X":50,"Y":150},{"X":50,"Y":110},{"X":10,"Y":110},{"X":10,"Y":10},{"X":110,"Y":10},{"X":110,"Y":50},{"X":150,"Y":50},{"X":150,"Y":150}],"holes":[[{"X":60,"Y":140},{"X":140,"Y":140},{"X":140,"Y":60},{"X":110,"Y":60},{"X":110,"Y":110},{"X":60,"Y":110}],[{"X":20,"Y":100},{"X":50,"Y":100},{"X":50,"Y":50},{"X":100,"Y":50},{"X":100,"Y":20},{"X":20,"Y":20}],[{"X":60,"Y":100},{"X":100,"Y":100},{"X":100,"Y":60},{"X":60,"Y":60}]]}];
    },
    getTestExPolygon2: function(){

        return [{
            "outer": [{"X":0,"Y":450},{"X":500,"Y":310},{"X":10,"Y":310}],
            "holes": [
                /*[ ]*/
            ]
        },

            { "outer":[{"X":50,"Y":150},{"X":50,"Y":110},{"X":10,"Y":110},{"X":10,"Y":10},{"X":110,"Y":10},{"X":110,"Y":50},{"X":150,"Y":50},{"X":150,"Y":150}],"holes":[[{"X":60,"Y":140},{"X":140,"Y":140},{"X":140,"Y":60},{"X":110,"Y":60},{"X":110,"Y":110},{"X":60,"Y":110}],[{"X":20,"Y":100},{"X":50,"Y":100},{"X":50,"Y":50},{"X":100,"Y":50},{"X":100,"Y":20},{"X":20,"Y":20}],[{"X":60,"Y":100},{"X":100,"Y":100},{"X":100,"Y":60},{"X":60,"Y":60}]]}];
    },
    getTestExPolygon3: function(){

        return [
            {
                "outer": [{"X":0,"Y":30},{"X":60,"Y":60},{"X":80,"Y":30}, {"X":0,"Y":0} ]
            },
            {
                "outer": [{"X":0,"Y":-30},{"X":60,"Y":-60},{"X":80,"Y":-30}],
                "holes": []
            }
        ];

    },

    boolenPoly: function(){

        var vertices1 = [
            [61,68],
            [145,122],
            [186,94],
            [224,135],
            [204,211],
            [105,200],
            [141,163],
            [48,139],
            [74,117]
        ];
        var vertices2 = [
            [131,84],
            [224,110],
            [174,180],
            [120,136],
            [60,167]
        ];

        var vertices3 = [
            [141,174],
            [144,170],
            [174,180]
        ];

    },
    drawTestPoly: function(model) {
        var polys = OA.Utils.getTestExPolygon();

        if (typeof(polys) != "undefined") {

            var exPolygons = polys;
            var a, i, j, jlen, ilen, exPolygon, holes, outer, polygon, outer_shape, hole_shape;
            var alen = exPolygons.length;
            var shapes = new Array(alen);

            for (a = 0; a < alen; a++) {
                exPolygon = exPolygons[a];
                holes = exPolygon.holes;
                outer = exPolygon.outer;
                jlen = outer.length;
                if (jlen) {

                    var borderGeo = new THREE.Geometry();

                    for (j = 0; j < jlen; j++) {
                        point = outer[j];
                        point = new THREE.Vector2(point.X, point.Y); // convert Clipper point to THREE.Vector2
                        outer[j] = point;

                        var vv = new THREE.Vector3(point.x, point.y, 0);
                        //vv.normalize();
                        //v.normalize()
                        borderGeo.vertices.push(new THREE.Vertex(vv));
                    }
                    //-----

                    vv = new THREE.Vector3(outer[0].x, outer[0].y, 0);
                    borderGeo.vertices.push(new THREE.Vertex(vv));
                    var border2 = new THREE.Line(borderGeo, new THREE.LineBasicMaterial({
                        linewidth: 2,
                        color: 0x00ffff
                    }));
                    model.add(border2);
                    //----
                    outer = new THREE.Shape(outer);
                    ilen = holes.length;
                    if (ilen) {


                        for (i = 0; i < ilen; i++) {
                            polygon = holes[i];

                            var borderGeo = new THREE.Geometry();

                            for (j = 0, jlen = polygon.length; j < jlen; j++) {
                                point = polygon[j];
                                point = new THREE.Vector2(point.X, point.Y); // convert Clipper point to THREE.Vector2
                                polygon[j] = point;

                                var vv = new THREE.Vector3(point.x, point.y, 0);
                                borderGeo.vertices.push(new THREE.Vertex(vv));

                            }

                            vv = new THREE.Vector3(polygon[0].x, polygon[0].y, 0);
                            borderGeo.vertices.push(new THREE.Vertex(vv));
                            var border3 = new THREE.Line(borderGeo, new THREE.LineBasicMaterial({
                                linewidth: 2,
                                color: 0x00ffff
                            }));
                            model.add(border3);

                            holes[i] = new THREE.Shape(polygon);
                        }
                        outer.holes = holes;
                    }
                    shapes[a] = outer;
                }
            }
            shapes = shapes.filter(function() {
                return true
            });
        }

        var materialFront = new THREE.MeshPhongMaterial({
            color: 0xff0000
            // ambient: 0xffffff,
        });
        var materialSide = new THREE.MeshPhongMaterial({
            color: 0xA5589D
            //  ambient: 0xffffff
        });

        var extrusionSettings = {
            amount: 0,
            bevelEnabled: true,
            bevelThickness: 0.7,
            bevelSize: 0.7,
            bevelSegments: 1,
            material: 0,
            extrudeMaterial: 1
        };

        var geometry1 = new THREE.ExtrudeGeometry(shapes, extrusionSettings);
        var materials = [materialFront, materialSide];

        var planeGeom = new THREE.ShapeGeometry(shapes);

        var plane = new THREE.Mesh(planeGeom, new THREE.MeshBasicMaterial({
            color: 0xff0000,
            side: THREE.DoubleSide,
            transparent: true
        }));

        for (var i = 0; i < shapes.length; i++) {

            var pointsGeom = shapes[i].createPointsGeometry();
            var border = new THREE.Line(pointsGeom, new THREE.LineBasicMaterial({
                linewidth: 3,
                color: 0x000000
            }));
            var holes = shapes[i].holes;
            for (var j = 0; j < holes.length; j++) {

                var pointsGeom2 = holes[j].createPointsGeometry();
                var border2 = new THREE.Line(pointsGeom2, new THREE.LineBasicMaterial({
                    linewidth: 3,
                    color: 0x000000
                }));

                model.add(border2);
            }

            model.add(border);
        }



        // var line = new THREE.Line( planeGeom, new THREE.LineBasicMaterial({
        //          linewidth: 2,
        //          color: 0x0000ff
        //       } ));
        // model.add( line );
        // var pointsGeom = planeGeom.createPointsGeometry();
        //   var border = new THREE.Line(pointsGeom, new THREE.LineBasicMaterial({
        //      linewidth: 2,
        //      color: 0x0000ff
        //   }));
        THREE.GeometryUtils.center(plane.geometry);
        model.add(plane);


        // model.add(border);

        var material = new THREE.MeshFaceMaterial(materials);

        var mesh = new THREE.Mesh(geometry1, material);

        function center(geometry) {

            geometry.computeBoundingBox();

            var bb = geometry.boundingBox;

            var offset = new THREE.Vector3();

            offset.addVectors(bb.min, bb.max);
            offset.multiplyScalar(-0.5);

            geometry.applyMatrix(new THREE.Matrix4().makeTranslation(offset.x, offset.y, 0));
            geometry.computeBoundingBox();
            return offset;
        };

        mesh.position.set(0, 0, 0);
        THREE.GeometryUtils.center(mesh.geometry);
        mesh.geometry.applyMatrix(new THREE.Matrix4().makeRotationX(Math.PI / 2));
        mesh.name = "Shape";
        model.add(mesh);
    }
};

OA.log = OA.Utils.log;

